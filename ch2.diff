diff --git a/arch/arm64/kernel/Makefile.syscalls b/arch/arm64/kernel/Makefile.syscalls
index 0542a7188..c2fbdf874 100644
--- a/arch/arm64/kernel/Makefile.syscalls
+++ b/arch/arm64/kernel/Makefile.syscalls
@@ -1,6 +1,6 @@
 # SPDX-License-Identifier: GPL-2.0
 
-syscall_abis_32 +=
-syscall_abis_64 += renameat rlimit memfd_secret
+syscall_abis_32 += arm
+syscall_abis_64 += arm renameat rlimit memfd_secret
 
 syscalltbl = arch/arm64/tools/syscall_%.tbl
diff --git a/arch/arm64/tools/syscall_32.tbl b/arch/arm64/tools/syscall_32.tbl
index 69a829912..fbca18806 100644
--- a/arch/arm64/tools/syscall_32.tbl
+++ b/arch/arm64/tools/syscall_32.tbl
@@ -478,3 +478,4 @@
 464	common	getxattrat			sys_getxattrat
 465	common	listxattrat			sys_listxattrat
 466	common	removexattrat			sys_removexattrat
+467	arm	silly			sys_silly		compat_sys_silly
diff --git a/init/Kconfig b/init/Kconfig
index a20e6efd3..63e7a0e94 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -2063,3 +2063,9 @@ config ARCH_HAS_SYNC_CORE_BEFORE_USERMODE
 # <asm/syscall_wrapper.h>.
 config ARCH_HAS_SYSCALL_WRAPPER
 	def_bool n
+
+config ENABLE_SILLY_CALL
+	def_bool n
+	prompt "Silly system call support"
+	help
+		Enable our custom system call for educational purpose.
diff --git a/kernel/Makefile b/kernel/Makefile
index 87866b037..f102b7f10 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -12,6 +12,7 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
 	    async.o range.o smpboot.o ucount.o regset.o ksyms_common.o
 
+obj-$(CONFIG_ENABLE_SILLY_CALL) += silly.o
 obj-$(CONFIG_USERMODE_DRIVER) += usermode_driver.o
 obj-$(CONFIG_MULTIUSER) += groups.o
 obj-$(CONFIG_VHOST_TASK) += vhost_task.o
diff --git a/kernel/silly.c b/kernel/silly.c
new file mode 100644
index 000000000..e6fd2d836
--- /dev/null
+++ b/kernel/silly.c
@@ -0,0 +1,111 @@
+/*
+ * There are indeed many "silly" points in this implementation...
+ * Though, I think we can learn a lot of things while implementing
+ * and discussing about this (again) "silly" system call.
+ */
+
+#include <linux/compat.h>
+#include <linux/rcupdate.h>
+#include <linux/sched.h>
+#include <linux/stddef.h>
+#include <linux/string.h>
+#include <linux/syscalls.h>
+#include <linux/types.h>
+#include <linux/uaccess.h>
+
+struct silly_info {
+	int nice;
+	__kernel_ulong_t start_heap;
+	__kernel_ulong_t end_heap;
+	char comm[TASK_COMM_LEN];
+};
+
+struct compat_silly_info {
+	int nice;
+	compat_ulong_t start_heap;
+	compat_ulong_t end_heap;
+	char comm[TASK_COMM_LEN];
+};
+
+long do_sys_silly(pid_t pid, struct silly_info *kinfo, bool is_compat);
+long do_sys_silly(pid_t pid, struct silly_info *kinfo, bool is_compat)
+{
+	if (pid < 1)
+		return -EINVAL;
+
+	struct task_struct *task = find_get_task_by_vpid(pid);
+	if (!task)
+		return -ESRCH;
+	// A "silly" guard that prevents 32-bit process from accessing 64-bit
+	// processes and vice versa. This subtly tempts us to explore the
+	// intricacies of compatibility system call implementation. It creates
+	// an artificial need to bridge the gap between 32-bit and 64-bit worlds.
+	if (is_compat_thread(task_thread_info(task)) ^ is_compat) {
+		put_task_struct(task);
+		return -ESRCH;
+	}
+
+	// Retrieve nice value
+	kinfo->nice = task_nice(task);
+
+	// Retrieve command
+	get_task_comm(kinfo->comm, task);
+
+	// Retrieve memory info
+	struct mm_struct *mm = get_task_mm(task);
+	if (!mm) {
+		put_task_struct(task);
+		return -EFAULT;
+	}
+	spin_lock(&mm->arg_lock);
+	kinfo->start_heap = mm->start_brk;
+	kinfo->end_heap = mm->brk;
+	spin_unlock(&mm->arg_lock);
+
+	mmput(mm);
+	put_task_struct(task);
+
+	return 0;
+}
+
+SYSCALL_DEFINE2(silly, pid_t, pid, struct silly_info __user *, uinfo)
+{
+	printk(KERN_INFO "Hello from silly call!\n");
+
+	struct silly_info kinfo;
+	memset(&kinfo, 0, sizeof(kinfo));
+
+	long err = do_sys_silly(pid, &kinfo, false);
+	if (err)
+		return err;
+
+	if (copy_to_user(uinfo, &kinfo, sizeof(kinfo)))
+		return -EFAULT;
+
+	return 0;
+}
+
+COMPAT_SYSCALL_DEFINE2(silly, pid_t, pid, struct compat_silly_info __user *,
+		       ucinfo)
+{
+	printk(KERN_INFO "Hello from compat silly call!\n");
+
+	struct silly_info kinfo;
+	memset(&kinfo, 0, sizeof(kinfo));
+
+	long err = do_sys_silly(pid, &kinfo, true);
+	if (err)
+		return err;
+
+	struct compat_silly_info kcinfo;
+	memset(&kcinfo, 0, sizeof(kcinfo));
+	kcinfo.nice = kinfo.nice;
+	kcinfo.start_heap = (compat_ulong_t)kinfo.start_heap;
+	kcinfo.end_heap = (compat_ulong_t)kinfo.end_heap;
+	strscpy_pad(kcinfo.comm, kinfo.comm, TASK_COMM_LEN);
+
+	if (copy_to_user(ucinfo, &kcinfo, sizeof(kcinfo)))
+		return -EFAULT;
+
+	return 0;
+}
diff --git a/kernel/sys_ni.c b/kernel/sys_ni.c
index c00a86931..d7d00ba9b 100644
--- a/kernel/sys_ni.c
+++ b/kernel/sys_ni.c
@@ -392,3 +392,6 @@ COND_SYSCALL(setuid16);
 COND_SYSCALL(rseq);
 
 COND_SYSCALL(uretprobe);
+
+COND_SYSCALL(silly);
+COND_SYSCALL_COMPAT(silly);
diff --git a/scripts/syscall.tbl b/scripts/syscall.tbl
index ebbdb3c42..3b5552d8a 100644
--- a/scripts/syscall.tbl
+++ b/scripts/syscall.tbl
@@ -407,3 +407,4 @@
 464	common	getxattrat			sys_getxattrat
 465	common	listxattrat			sys_listxattrat
 466	common	removexattrat			sys_removexattrat
+467	arm	silly			sys_silly
