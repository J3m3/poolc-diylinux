docker image build -t diylinux:6.13 .
docker container run --privileged --name diylinux -it diylinux:6.13 bash

cd linux
make help
make help | grep tiny
make tinyconfig
make menuconfig
# General setup  --->
#       Preemption Model (Preemptive Kernel (Low-Latency Desktop))
#   [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
#         [ ] Support initial ramdisk/ramfs compressed using gzip
#         [ ] Support initial ramdisk/ramfs compressed using bzip2
#         [ ] Support initial ramdisk/ramfs compressed using LZMA
#         [ ] Support initial ramdisk/ramfs compressed using XZ
#         [ ] Support initial ramdisk/ramfs compressed using LZO
#         [ ] Support initial ramdisk/ramfs compressed using LZ4 
#         [ ] Support initial ramdisk/ramfs compressed using ZSTD
#   [*] Configure standard kernel features (expert users)
#         [*] Enable support for printk
#   [*] Load all symbols for debugging/ksymoops
# Kernel features
#   [*] Kernel support for 32-bit EL0
# Boot options  --->
#   [*] UEFI runtime support
# Executable file formats  --->
#   [*] Kernel support for ELF binaries
#   [*] Kernel support for scripts starting with #!
# Device Drivers  --->
#       Generic Driver Options --->
#         [*] Maintain a devtmpfs filesystem to mount at /dev
#       Character devices  --->
#         [*] Enable TTY
#             Serial drivers  --->
#               [*] ARM AMBA PL011 serial port support
#               [*]   Support for console on AMBA serial port
# File systems  --->
#       Pseudo filesystems  --->
#         [*] /proc file system support
#         [*] sysfs file system support
# Kernel hacking
#       Compile-time checks and compiler options  --->
#             Debug information (Rely on the toolchain's implicit default DWARF version)

bear -- make -j$(nproc)

mkdir /distro
cp arch/arm64/boot/Image /distro

cd /busybox
make menuconfig
# Settings  --->
#   [*] Build static binary (no shared libs)
# Networking Utilities  --->
#   [ ] tc (8.3 kb)
# See https://lists.busybox.net/pipermail/busybox-cvs/2024-January/041752.html
make -j$(nproc)
mkdir /distro/initramfs
make CONFIG_PREFIX=/distro/initramfs install

cd /distro/initramfs
mkdir proc sys dev
rm linuxrc
vim init
# #!/bin/sh
# 
# mount -t proc none /proc
# mount -t sysfs none /sys
# mount -t devtmpfs none /dev
#
# setsid sh -c 'exec sh </dev/ttyAMA0 >/dev/ttyAMA0 2>&1'
chmod +x init
find . | cpio -o -H newc > ../initramfs.cpio

cd /distro
apt update && apt install refind
# no
./mkdisk.sh

cp /usr/share/qemu-efi-aarch64/QEMU_EFI.fd .
truncate -s 64M efivars.img
truncate -s 64M eficode.img
dd if=QEMU_EFI.fd of=eficode.img conv=notrunc

./boot.sh --image

cd /distro/initramfs
vim hello.c
# #include <stdio.h>
# 
# int main() {
#   printf("Hello, world!\n");
#   return 0;
# }
aarch64-linux-gnu-gcc -o hello hello.c
cd ..
./mkdisk.sh

./boot.sh --image

cd /distro/initramfs
aarch64-linux-gnu-gcc -static -o hello hello.c
ldd hello
cd ..
./mkdisk.sh

./boot.sh --image