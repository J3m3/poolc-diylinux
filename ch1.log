brew install qemu

docker image build -t diylinux:6.13 .
docker container run --privileged --name diylinux -it diylinux:6.13 bash

# ----- CONTAINER -----

cd linux
make help
make help | grep tiny
make tinyconfig
make menuconfig 
# General setup  --->
#   [*] Configure standard kernel features (expert users)
#         [*] Enable support for printk
#   [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
#         [ ] Support initial ramdisk/ramfs compressed using gzip
#         [ ] Support initial ramdisk/ramfs compressed using bzip2
#         [ ] Support initial ramdisk/ramfs compressed using LZMA
#         [ ] Support initial ramdisk/ramfs compressed using XZ
#         [ ] Support initial ramdisk/ramfs compressed using LZO
#         [ ] Support initial ramdisk/ramfs compressed using LZ4 
#         [ ] Support initial ramdisk/ramfs compressed using ZSTD
# Boot options  --->
#   [*] UEFI runtime support
# Executable file formats  --->
#   [*] Kernel support for ELF binaries
#   [*] Kernel support for scripts starting with #!
# Device Drivers  --->
#       Character devices  --->
#         [*] Enable TTY
#             Serial drivers  --->
#               [*] ARM AMBA PL011 serial port support
#               [*]   Support for console on AMBA serial port

bear -- make -j$(nproc)

mkdir /distro
cp arch/arm64/boot/Image.gz /distro

cd /busybox
make menuconfig
# Settings  --->
#   [*] Build static binary (no shared libs)
# Networking Utilities  --->
#   [ ] tc (8.3 kb)
# See https://lists.busybox.net/pipermail/busybox-cvs/2024-January/041752.html
make -j$(nproc)
mkdir /distro/initramfs
make CONFIG_PREFIX=/distro/initramfs install

cd /distro/initramfs
rm linuxrc
vim init
# #!/bin/sh
# 
# echo "Hello, MyOwnLinux!"
# /bin/sh
chmod +x init
find . | cpio -o -H newc > ../initramfs.cpio

dd if=/dev/zero of=disk.img bs=1M count=36
mkfs.vfat -F32 -n EFI disk.img
mkdir mnt
mount disk.img mnt
mkdir -p mnt/EFI/BOOT
grub-install --target=arm64-efi --efi-directory=mnt --boot-directory=mnt --removable
vim mnt/EFI/BOOT/grub.cfg
# set timeout=10
# set default=0
# 
# menuentry "Linux Kernel" {
#     linux /boot/Image.gz console=ttyAMA0
#     initrd /boot/initramfs.cpio
# }

mkdir mnt/boot
cp Image.gz initramfs.cpio mnt/boot
umount mnt

wget https://snapshots.linaro.org/components/kernel/leg-virt-tianocore-edk2-upstream/5552/QEMU-AARCH64/RELEASE_GCC/QEMU_EFI.fd
truncate -s 64M efivars.img
truncate -s 64M eficode.img
dd if=QEMU_EFI.fd of=eficode.img conv=notrunc

# ----- CONTAINER END -----

docker cp $CONTAINER_ID:/distro .
qemu-system-aarch64 \
  -machine virt,acpi=off \
  -cpu cortex-a53 \
  -smp 2 \
  -m 1G \
  -drive if=pflash,format=raw,file=distro/eficode.img,readonly=on \
  -drive if=pflash,format=raw,file=distro/efivars.img \
  -drive file=distro/disk.img,format=raw,if=virtio \
  -nographic